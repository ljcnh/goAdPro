
    RPC规则：方法只能有两个可序列化的参数，其中第二个参数是指针类型，并且返回一个error类型，同时必须是公开的方法



# gRPC进阶
针对每个gRPC链接的认证
    可以使用openssl生成证书，进行验证

    有两种方式：
        $ openssl genrsa -out server.key 2048
        $ openssl req -new -x509 -days 3650 \
            -subj "/C=GB/L=China/O=grpc-server/CN=server.grpc.io" \
            -key server.key -out server.crt

        $ openssl genrsa -out client.key 2048
        $ openssl req -new -x509 -days 3650 \
            -subj "/C=GB/L=China/O=grpc-client/CN=client.grpc.io" \
            -key client.key -out client.crt

        生成server.key、server.crt、client.key和client.crt四个文件
        以上这种方式，需要提前将服务器的证书告知客户端，这样客户端在链接服务器时才能进行对服务器证书认证。
        不安全！

    为了安全：可以通过一个安全可靠的根证书分别对服务器和客户端的证书进行签名
        根证书生成
        $ openssl genrsa -out ca.key 2048
        $ openssl req -new -x509 -days 3650 \
            -subj "/C=GB/L=China/O=gobook/CN=github.com" \
            -key ca.key -out ca.crt
        对服务器端证书进行签名
        $ openssl req -new \
            -subj "/C=GB/L=China/O=server/CN=server.io" \
            -key server.key \
            -out server.csr
        $ openssl x509 -req -sha256 \
            -CA ca.crt -CAkey ca.key -CAcreateserial -days 3650 \
            -in server.csr \
            -out server.crt
        CA根证书对客户端证书签名
        $ openssl req -new \
            -subj "/C=GB/L=China/O=client/CN=client.io" \
            -key client.key \
            -out client.csr
        $ openssl x509 -req -sha256 \
            -CA ca.crt -CAkey ca.key -CAcreateserial -days 3650 \
            -in client.csr \
            -out client.crt

        同时，在启动服务器时要配置根证书
Token认证：针对用户
    基于用户Token对不同的方法访问进行权限管理



gRPC和Web服务共存（在同一个端口之上）
    http.ListenAndServeTLS(port, "server.crt", "server.key",
        http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
            if r.ProtoMajor != 2 {
                mux.ServeHTTP(w, r)
                return
            }
            if strings.Contains(
                r.Header.Get("Content-Type"), "application/grpc",
            ) {
                grpcServer.ServeHTTP(w, r) // gRPC Server
                return
            }
            mux.ServeHTTP(w, r)
            return
        }),
    )


生成message3.validator.pb.go
    protoc --proto_path=C:\Users\10168\AppData\Local\JetBrains\GoLand2021.3\protoeditor\google --proto_path=D:\GoENV\gopath\pkg\mod --proto_path=. --govalidators_out=. --go_out=plugins=grpc:.  message3.proto
生成grpc-gateway
    protoc --proto_path=C:\Users\10168\AppData\Local\JetBrains\GoLand2021.3\protoeditor\google --proto_path=D:\GoENV\gopath\pkg\mod\google.golang.org\protobuf@v1.27.1\ --proto_path=D:\GoENV\gopath\pkg\mod --proto_path=D:\GoENV\gopath\pkg\mod\github.com\grpc-ecosystem\grpc-gateway@v1.16.0\third_party\googleapis\  --proto_path=. --grpc-gateway_out=. --go_out=plugins=grpc:.  hello.proto
生成Swagger（hello.swagger.json）
    protoc -I.  -ID:\GoENV\gopath\pkg\mod\github.com\grpc-ecosystem\grpc-gateway@v1.16.0\third_party\googleapis  -ID:\GoENV\gopath\pkg\mod\ --swagger_out=. hello.proto


    4.7 启动rest服务的时候，报错
        注释掉 pbgo.pb.go 中的
            proto.RegisterType((*String)(nil), "hello_pb.String")
            proto.RegisterFile("pbgo.proto", fileDescriptor_b985d811f57ce1c6)
        可能是因为版本问题...  毕竟有点老了


grpcurl工具
    用于测试gRPC服务

