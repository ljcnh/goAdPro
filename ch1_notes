## ch1
    字符串赋值只是复制了数据地址和对应的长度，而不会导致底层数据的复制
    切片的结构和字符串结构类似，但是解除了只读限制;切片赋值和函数传参数时也是将切片头信息部分按传值方式处理;因为切片头含有底层数据的指针，所以它的赋值也不会导致底层数据的复制。
    除了闭包函数以引用的方式对外部变量访问之外，其它赋值和函数传参数都是以传值的方式处理

# 数组、字符串和切片
数组
    数组的长度是数组类型的组成部分
    go中的数组都是不可变的，和c++(vector)，python，java等都不一样，一般不会直接使用数组，而是使用slice
    数组在go中表示值语义， 可以看作是一个变量一个整体， 表示的是整个的数组

字符串
    type StringHeader struct {
        Data uintptr
        Len  int
    }
    不可修改的字符序列
    字符串结构组成：字符串指向的底层字节数组  字符串的字节长度
    字符串复制的时候不会涉及底层字节数组的复制

切片(slice)
    type SliceHeader struct {
        Data uintptr
        Len  int
        Cap  int  // 切片指向的内存空间的最大容量  对应元素的个数，而不是字节数
    }
    只是复制切片头信息（reflect.SliceHeader），并不会复制底层的数据
    例子：
       	x := []int{2,3,5,7,11}
        y := x[1:3]
       	y[0] = 29
       	最终：
       	    [2 29 5 7 11]
       	    [29 5]
       	在普通情况下，不会拷贝底层的数组

    但是在slice作为参数的时候会出现多种情况：
    1. slice作为指针传入的情况
        所有的修改全部作用于slice
    2. slice 不作为指针传入
        slice没有充足的cap：
            append操作不会对原数组产生影响
            在append之前的 赋值操作会产生作用 对其之后的不会产生操作
        slice有充足的cap：
            append操作不会对原数组产生影响
            所有的赋值操作都会产生作用
    例子：
        func Add2Slice(s *[]int, t int) {
        	(*s)[0]++
        	*s = append(*s, t)
        	(*s)[0]++
        }

        func AddSlice(s []int, t int) {
        	s[0]++
        	s = append(s, t)
        	s[0]++
        	fmt.Println(s)
        }
        func main() {
        	a := []int{0, 1, 2, 3}
        	Add2Slice(&a, 4) // [2 1 2 3 4]

        	b := make([]int,4,10)  //[0 0 0 0]
        	AddSlice(b, 4) //  [2 0 0 0 4]
        	fmt.Println(b) // [2 0 0 0]

        	c := []int{0, 1, 2, 3}
        	AddSlice(c, 4) // [2 1 2 3 4]
        	fmt.Println(c)   //  [1 1 2 3]
        }


    在实现函数的时候，尤其是函数内部需要加载大量数据，而我们只需要少部分数据的时候，为避免内存泄露，我们可以重新创建一个数组

    若切片里存放的是指针对象，那么删除末尾的元素后，被删除的元素依然被切片底层数组引用
        var a []*int{ ... }
        a = a[:len(a)-1]
    正确方式是:先将需要自动内存回收的元素设置为nil (如果切片存在的周期很短的话，可以不用刻意处理这个问题)
        var a []*int{ ... }
        a[len(a)-1] = nil // GC回收最后一个元素内存
        a = a[:len(a)-1]

# 函数、方法和接口
    包在初始化过程中，在main.main函数执行之前所有代码都运行在同一个goroutine，即使在init中使用go启动了新的goroutine
函数
    采用一个类似动态数组的结构来表示栈
    问题：当连续栈动态增长时，需要将之前的数据移动到新的内存空间，这会导致之前栈中全部变量的地址发生变化，Go语言中指针不再是固定不变的了
    不能随意将指针保持到数值变量中，Go语言的地址也不能随意保存到不在GC控制的环境中，因此使用CGO时不能在C语言中长期持有Go语言对象的地址

    func f(x int) *int {
        return &x
    }
    这在c/c++中是要报错的 没想到...
方法
    每种类型对应的方法必须和类型的定义在同一个包中
    不支持重载
        嵌入匿名的成员来“继承”的基类方法，this就是实现该方法的类型的对象，
    Go语言中方法是编译时静态绑定的，所以不会存在运行的不确定性
接口
      golang的接口极为灵活，为了避免 对象和接口 之间的无意适配，可以定义一个特殊的方法进行区分
    其中，runtime.Error接口就定义了一个特有的RuntimeError方法
      再严格一点的做法是给接口定义一个私有方法: 只有满足了这个私有方法的对象才可能满足这个接口，
    而私有方法的名字是包含包的绝对路径名的，因此只能在包内部实现这个私有方法才能满足这个接口

# 面向并发的内存模型
原子操作
    用互斥锁来保护一个数值型的共享资源，麻烦且效率低下。标准库的sync/atomic包对原子操作提供了丰富的支持
顺序一致性内存模型
    在一个Goroutine的内部
    两个事件并发：为了最大化并行，Go语言的编译器和处理器在不影响上述规定的前提下可能会对执行语句重新排序
基于Channel的通信
    无缓存的Channel上的发送操作总在对应的接收操作完成前发生.
    对于从无缓冲Channel进行的接收，发生在对该Channel进行的发送完成之前


# 常见的并发模式
不要通过共享内存来通信，而应通过通信来共享内存。
pub/sub 模式 有点意思

优雅的退出
    使用close关闭通信
    使用sync.WaitGroup等待所有线程关闭后，main Goroutine在退出
      例子:
        func worker(wg *sync.WaitGroup, cannel chan bool) {
            defer wg.Done()

            for {
                select {
                default:
                    fmt.Println("hello")
                case <-cannel:
                    return
                }
            }
        }
        func main() {
            cancel := make(chan bool)
            var wg sync.WaitGroup
            for i := 0; i < 10; i++ {
                wg.Add(1)
                go worker(&wg, cancel)
            }
            time.Sleep(time.Second)
            close(cancel)
            wg.Wait()
        }

content包
    用来简化对于处理单个请求的多个Goroutine之间与请求域的数据、超时和退出等操作
    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)

    case <-ctx.Done():
        return ctx.Err()

    cancel()

$ 错误和异常
    在Go语言中，错误被认为是一种可以预期的结果；而异常则是一种非预期的结果，发生异常可能表示程序中存在BUG或发生了其它不可控的问题。
    Go语言推荐使用recover函数将内部异常转为错误处理，这使得用户可以真正的关心业务相关的错误处理。
    将所有的错误当做异常抛出没有价值
        defer func() {
            if r := recover(); r != nil {
                log.Fatal(r)
            }
        }()
    捕获异常不是最终的目的。如果异常不可预测，直接输出异常信息是最好的处理方式。

    defer语句可以让我们在打开文件时马上思考如何关闭文件。

    即使在包内部使用了panic，但是在导出函数时会被转化为明确的错误值。

    在defer语句中执行recover！
    我们必须在defer函数中直接调用recover
    失败情况：
        在defer中调用recover的包装函数，异常捕获工作失败
            defer func() {
                // 无法捕获异常
                if r := MyRecover(); r != nil {
                    fmt.Println(r)
                }
            }()
        在嵌套的defer函数中调用recover失败
            defer func() {
                defer func() {
                    // 无法捕获异常
                    if r := recover(); r != nil {
                        fmt.Println(r)
                    }
                }()
            }()
    都是经过了2个函数帧才到达真正的recover函数

    但是这样就会成功：
        defer MyRecover()

    但是这样会失败
        defer recover()
    直接调用了recover函数

    总之：必须要和有异常的栈帧只隔一个栈帧，recover函数才能正常捕获异常。

    可以抛出异常类型，但不推荐
        defer func() {
            if r := recover(); r != nil {
                switch x := r.(type) {
                case runtime.Error:
                    // 这是运行时错误类型异常
                case error:
                    // 普通错误类型异常
                default:
                    // 其他类型异常
                }
            }
        }()


