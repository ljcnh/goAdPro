// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pbgo.proto

package main

import (
	fmt "fmt"
	_ "github.com/chai2010/pbgo"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	encoding_json "encoding/json"
	io "io"
	io_ioutil "io/ioutil"
	net_http "net/http"
	net_rpc "net/rpc"
	regexp "regexp"
	strings "strings"

	github_com_chai2010_pbgo "github.com/chai2010/pbgo"
	github_com_julienschmidt_httprouter "github.com/julienschmidt/httprouter"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type String struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *String) Reset()         { *m = String{} }
func (m *String) String() string { return proto.CompactTextString(m) }
func (*String) ProtoMessage()    {}
func (*String) Descriptor() ([]byte, []int) {
	return fileDescriptor_b985d811f57ce1c6, []int{0}
}

func (m *String) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_String.Unmarshal(m, b)
}
func (m *String) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_String.Marshal(b, m, deterministic)
}
func (m *String) XXX_Merge(src proto.Message) {
	xxx_messageInfo_String.Merge(m, src)
}
func (m *String) XXX_Size() int {
	return xxx_messageInfo_String.Size(m)
}
func (m *String) XXX_DiscardUnknown() {
	xxx_messageInfo_String.DiscardUnknown(m)
}

var xxx_messageInfo_String proto.InternalMessageInfo

func (m *String) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*String)(nil), "hello_pb.String")
}

func init() { proto.RegisterFile("pbgo.proto", fileDescriptor_b985d811f57ce1c6) }

var fileDescriptor_b985d811f57ce1c6 = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x48, 0x4a, 0xcf,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xc8, 0x48, 0xcd, 0xc9, 0xc9, 0x8f, 0x2f, 0x48,
	0x92, 0xd2, 0x4a, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xce, 0x48,
	0xcc, 0x34, 0x32, 0x30, 0x34, 0xd0, 0x07, 0xa9, 0x74, 0x28, 0x33, 0xd4, 0x33, 0xd1, 0x33, 0xd4,
	0x47, 0xe8, 0x52, 0x92, 0xe3, 0x62, 0x0b, 0x2e, 0x29, 0xca, 0xcc, 0x4b, 0x17, 0x12, 0xe1, 0x62,
	0x2d, 0x4b, 0xcc, 0x29, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x70, 0x8c, 0x02,
	0xb9, 0x78, 0x3c, 0x40, 0xe6, 0x06, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x0a, 0x39, 0x72, 0xb1,
	0x82, 0xf9, 0x42, 0x02, 0x7a, 0x30, 0xfb, 0xf4, 0x20, 0x06, 0x48, 0x61, 0x88, 0x28, 0x89, 0xdc,
	0x7a, 0xf7, 0xd7, 0x87, 0x9f, 0x8b, 0x57, 0x1f, 0x2c, 0xa1, 0x6f, 0x05, 0x36, 0xd2, 0x89, 0x33,
	0x8a, 0x5d, 0x4f, 0xdf, 0x3a, 0x37, 0x31, 0x33, 0x2f, 0x89, 0x0d, 0xec, 0x08, 0x63, 0x40, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xa5, 0x7c, 0x17, 0x46, 0xc8, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ = context.Background
var _ = encoding_json.Marshal
var _ = net_rpc.Server{}
var _ = net_http.ListenAndServe
var _ = io.EOF
var _ = io_ioutil.ReadAll
var _ = regexp.Match
var _ = strings.Split
var _ = github_com_chai2010_pbgo.PopulateFieldFromPath
var _ = github_com_julienschmidt_httprouter.New

type HelloServiceInterface interface {
	Hello(in *String, out *String) error
}

type HelloServiceGrpcInterface interface {
	Hello(ctx context.Context, in *String) (out *String, err error)
}

func RegisterHelloService(srv *net_rpc.Server, x HelloServiceInterface) error {
	if _, ok := x.(*HelloServiceValidator); !ok {
		x = &HelloServiceValidator{HelloServiceInterface: x}
	}

	if err := srv.RegisterName("HelloService", x); err != nil {
		return err
	}
	return nil
}

type HelloServiceValidator struct {
	HelloServiceInterface
}

func (p *HelloServiceValidator) Hello(in *String, out *String) error {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return err
		}
	}

	if err := p.HelloServiceInterface.Hello(in, out); err != nil {
		return err
	}

	if x, ok := proto.Message(out).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return err
		}
	}

	return nil
}

type HelloServiceClient struct {
	*net_rpc.Client
}

func DialHelloService(network, address string) (*HelloServiceClient, error) {
	c, err := net_rpc.Dial(network, address)
	if err != nil {
		return nil, err
	}
	return &HelloServiceClient{Client: c}, nil
}

func (p *HelloServiceClient) Hello(in *String) (*String, error) {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	var out = new(String)
	if err := p.Client.Call("HelloService.Hello", in, out); err != nil {
		return nil, err
	}

	if x, ok := proto.Message(out).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}

	return out, nil
}
func (p *HelloServiceClient) AsyncHello(in *String, out *String, done chan *net_rpc.Call) *net_rpc.Call {
	if x, ok := proto.Message(in).(interface{ Validate() error }); ok {
		if err := x.Validate(); err != nil {
			call := &net_rpc.Call{
				ServiceMethod: "HelloService.Hello",
				Args:          in,
				Reply:         out,
				Error:         err,
				Done:          make(chan *net_rpc.Call, 10),
			}
			call.Done <- call
			return call
		}
	}

	return p.Go(
		"HelloService.Hello",
		in, out,
		done,
	)
}

type HelloServiceHttpClient struct {
	c       *net_http.Client
	baseurl string
}

func NewHelloServiceHttpClient(baseurl string, c ...*net_http.Client) *HelloServiceHttpClient {
	p := &HelloServiceHttpClient{
		c:       net_http.DefaultClient,
		baseurl: baseurl,
	}
	if len(c) != 0 && c[0] != nil {
		p.c = c[0]
	}
	return p
}

func (p *HelloServiceHttpClient) httpDoRequest(method, urlpath string, in interface{}) (mimeType string, content []byte, err error) {
	req, err := github_com_chai2010_pbgo.NewHttpRequest(method, urlpath, in)
	if err != nil {
		return "", nil, err
	}
	resp, err := p.c.Do(req)
	if err != nil {
		return "", nil, err
	}
	defer resp.Body.Close()

	mimeType = resp.Header.Get("Content-Type")
	content, err = io_ioutil.ReadAll(resp.Body)
	return
}

func (p *HelloServiceHttpClient) Hello(in *String, method ...string) (out *String, err error) {
	if len(method) == 0 {
		method = []string{"GET"}
	}
	if len(method) != 1 {
		return nil, fmt.Errorf("invalid method: %v", method)
	}

	var re = regexp.MustCompile("(\\*|\\:)(\\w|\\.)+")
	_ = re

	out = new(String)
	if method[0] == "GET" {
		urlpath := p.baseurl + fmt.Sprintf("/hello/%v", in.Value)
		err = github_com_chai2010_pbgo.HttpDo(method[0], urlpath, in, out)
		return out, err
	}

	return nil, fmt.Errorf("invalid method: %v", method)
}

func HelloServiceHandler(svc HelloServiceInterface) net_http.Handler {
	var router = github_com_julienschmidt_httprouter.New()

	var re = regexp.MustCompile("(\\*|\\:)(\\w|\\.)+")
	_ = re

	router.Handle("GET", "/hello/:value",
		func(w net_http.ResponseWriter, r *net_http.Request, ps github_com_julienschmidt_httprouter.Params) {
			var (
				protoReq   String
				protoReply String
			)

			for _, fieldPath := range re.FindAllString("/hello/:value", -1) {
				fieldPath := strings.TrimLeft(fieldPath, ":*")
				err := github_com_chai2010_pbgo.PopulateFieldFromPath(&protoReq, fieldPath, ps.ByName(fieldPath))
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := github_com_chai2010_pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := svc.Hello(&protoReq, &protoReply); err != nil {
				if pbgoErr, ok := err.(github_com_chai2010_pbgo.Error); ok {
					net_http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(&protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := encoding_json.NewEncoder(w).Encode(&protoReply); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
				return
			}
		},
	)

	return router
}

func HelloServiceGrpcHandler(
	ctx context.Context, svc HelloServiceGrpcInterface,
	fnAnnotateContext func(ctx context.Context, req *net_http.Request, methodName string) (context.Context, error),
) net_http.Handler {
	var router = github_com_julienschmidt_httprouter.New()

	var re = regexp.MustCompile("(\\*|\\:)(\\w|\\.)+")
	_ = re

	router.Handle("GET", "/hello/:value",
		func(w net_http.ResponseWriter, r *net_http.Request, ps github_com_julienschmidt_httprouter.Params) {
			var (
				protoReq   String
				protoReply *String
				err        error
			)

			for _, fieldPath := range re.FindAllString("/hello/:value", -1) {
				fieldPath := strings.TrimLeft(fieldPath, ":*")
				err := github_com_chai2010_pbgo.PopulateFieldFromPath(&protoReq, fieldPath, ps.ByName(fieldPath))
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if err := github_com_chai2010_pbgo.PopulateQueryParameters(&protoReq, r.URL.Query()); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusBadRequest)
				return
			}

			if x, ok := proto.Message(&protoReq).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if fnAnnotateContext != nil {
				var err error
				ctx, err = fnAnnotateContext(ctx, r, "HelloService.Hello")
				if err != nil {
					net_http.Error(w, err.Error(), net_http.StatusBadRequest)
					return
				}
			}

			if protoReply, err = svc.Hello(ctx, &protoReq); err != nil {
				if pbgoErr, ok := err.(github_com_chai2010_pbgo.Error); ok {
					net_http.Error(w, pbgoErr.Text(), pbgoErr.HttpStatus())
					return
				} else {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if x, ok := proto.Message(protoReply).(interface{ Validate() error }); ok {
				if err := x.Validate(); err != nil {
					net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
					return
				}
			}

			if strings.Contains(r.Header.Get("Accept"), "application/json") {
				w.Header().Set("Content-Type", "application/json")
			} else {
				w.Header().Set("Content-Type", "text/plain")
			}

			if err := encoding_json.NewEncoder(w).Encode(&protoReply); err != nil {
				net_http.Error(w, err.Error(), net_http.StatusInternalServerError)
				return
			}
		},
	)

	return router
}
